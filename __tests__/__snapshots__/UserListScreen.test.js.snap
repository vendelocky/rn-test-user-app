// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User List Component should match the snapshot 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <RNSScreenStack
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNSScreen
      forwardedRef={[Function]}
      onAppear={[Function]}
      onDisappear={[Function]}
      onDismissed={[Function]}
      onWillDisappear={[Function]}
      replaceAnimation="push"
      stackPresentation="push"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <RNSScreenStackHeaderConfig
        backButtonInCustomView={false}
        backgroundColor="rgb(255, 255, 255)"
        color="rgb(0, 122, 255)"
        direction="ltr"
        disableBackButtonMenu={false}
        hidden={false}
        hideBackButton={false}
        hideShadow={false}
        largeTitleHideShadow={false}
        title="MockedScreen"
        titleColor="rgb(28, 28, 30)"
        topInsetEnabled={false}
        translucent={false}
      >
        <RNSScreenStackHeaderSubview
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "center",
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
          type="right"
        >
          <View
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <Text
              style={
                Object {
                  "color": "#4099da",
                  "fontSize": 16,
                }
              }
            >
              Logout
            </Text>
          </View>
        </RNSScreenStackHeaderSubview>
      </RNSScreenStackHeaderConfig>
      <View
        style={
          Array [
            Object {
              "flex": 1,
            },
            Object {
              "backgroundColor": "rgb(242, 242, 242)",
            },
            undefined,
          ]
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#ffffff",
              "flex": 1,
            }
          }
        >
          <View
            style={
              Object {
                "backgroundColor": "#ffffff",
                "flexDirection": "row",
              }
            }
          >
            <TextInput
              onChangeText={[Function]}
              placeholder="Search..."
              placeholderTextColor="#cccccc"
              style={
                Array [
                  Object {
                    "borderBottomLeftRadius": 5,
                    "borderTopLeftRadius": 5,
                    "flex": 1,
                    "marginRight": 0,
                    "paddingHorizontal": 16,
                  },
                  Object {
                    "borderColor": "#cccccc",
                    "borderWidth": 1,
                    "color": "#000000",
                    "height": 44,
                    "margin": 16,
                  },
                ]
              }
            />
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              nativeID="animatedComponent"
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "borderBottomRightRadius": 5,
                  "borderColor": "#cccccc",
                  "borderTopRightRadius": 5,
                  "borderWidth": 1,
                  "color": "#000000",
                  "height": 44,
                  "justifyContent": "center",
                  "margin": 16,
                  "marginLeft": 0,
                  "opacity": 1,
                  "paddingHorizontal": 24,
                }
              }
            >
              <Text
                style={
                  Object {
                    "color": "#000000",
                    "fontSize": 16,
                    "fontWeight": "bold",
                  }
                }
              >
                GO!
              </Text>
            </View>
          </View>
          <RCTScrollView
            ItemSeparatorComponent={[Function]}
            ListFooterComponent={
              <Spacer
                height={24}
              />
            }
            data={Array []}
            getItem={[Function]}
            getItemCount={[Function]}
            keyExtractor={[Function]}
            onContentSizeChange={[Function]}
            onEndReached={[Function]}
            onEndReachedThreshold={0.1}
            onLayout={[Function]}
            onMomentumScrollBegin={[Function]}
            onMomentumScrollEnd={[Function]}
            onRefresh={[Function]}
            onScroll={[Function]}
            onScrollBeginDrag={[Function]}
            onScrollEndDrag={[Function]}
            refreshControl={
              <RefreshControlMock
                onRefresh={[Function]}
                refreshing={false}
              />
            }
            refreshing={false}
            removeClippedSubviews={false}
            renderItem={[Function]}
            scrollEventThrottle={50}
            stickyHeaderIndices={Array []}
            style={
              Object {
                "backgroundColor": "#ffffff",
                "padding": 16,
              }
            }
            viewabilityConfigCallbackPairs={Array []}
          >
            <RCTRefreshControl />
            <View>
              <View
                onLayout={[Function]}
              >
                <View
                  style={
                    Array [
                      null,
                      Object {
                        "height": 24,
                      },
                    ]
                  }
                />
              </View>
            </View>
          </RCTScrollView>
          <ActivityIndicator
            color="#4099da"
            size="large"
          />
        </View>
      </View>
    </RNSScreen>
  </RNSScreenStack>
</RNCSafeAreaProvider>
`;
